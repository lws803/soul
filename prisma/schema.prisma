generator client {
  provider = "prisma-client-js"
}

// TODO: Create mapping and change naming conventions for the tables here

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model platform_categories {
  id        Int         @id @default(autoincrement())
  name      String      @unique(map: "IDX_6b0e6556c6dddaad1ab2c6fbe5") @db.VarChar(255)
  platforms platforms[]
}

model PlatformUser {
  id             Int            @id @default(autoincrement())
  roles          Json?
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userId         Int?           @map("user_id")
  platformId     Int?           @map("platform_id")
  profileUrl     String?        @map("profile_url") @db.VarChar(255)
  platforms      platforms?     @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1d2a9b39f3477e0aa97a996d711")
  users          User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_f48bdedbdc9ce9ed23392fdc4b4")
  refresh_tokens RefreshToken[]

  @@unique([userId, platformId], map: "IDX_9a2328071f3e0ff4b0836cffc8")
  @@index([platformId], map: "FK_1d2a9b39f3477e0aa97a996d711")
  @@map("platform_users")
}

model platforms {
  id                                          Int                                           @id @default(autoincrement())
  name                                        String                                        @db.VarChar(255)
  name_handle                                 String?                                       @unique(map: "IDX_9a4647eddfb970ff1db96fd2e5") @db.VarChar(255)
  created_at                                  DateTime                                      @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime                                      @default(now()) @db.Timestamp(6)
  is_verified                                 Int                                           @default(0) @db.TinyInt
  redirect_uris                               Json
  platform_category_id                        Int?
  activity_webhook_uri                        String?                                       @db.VarChar(255)
  client_secret                               String?                                       @db.VarChar(255)
  homepage_url                                String?                                       @db.VarChar(255)
  platform_categories                         platform_categories?                          @relation(fields: [platform_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_36ae51f292e99bb131443b47390")
  platform_users                              PlatformUser[]
  platforms_user_connections_user_connections platforms_user_connections_user_connections[]
  user_connections_platforms_platforms        user_connections_platforms_platforms[]

  @@index([platform_category_id], map: "FK_36ae51f292e99bb131443b47390")
  @@index([name], map: "IDX_6add27e349b6905c85e016fa2c")
}

model platforms_user_connections_user_connections {
  user_connection_id Int
  platform_id        Int
  user_connections   UserConnection @relation(fields: [platform_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_68497f3c1d20e50b6701fd27716")
  platforms          platforms      @relation(fields: [user_connection_id], references: [id], onDelete: Cascade, map: "FK_ec16e6694ea1e9b32c032f2088e")

  @@id([user_connection_id, platform_id])
  @@index([platform_id], map: "IDX_68497f3c1d20e50b6701fd2771")
  @@index([user_connection_id], map: "IDX_ec16e6694ea1e9b32c032f2088")
}

model RefreshToken {
  id             Int           @id @default(autoincrement())
  isRevoked      Boolean       @map("is_revoked") @db.TinyInt
  expires        DateTime      @db.DateTime(0)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userId         Int?          @map("user_id")
  platformUserId Int?          @map("platform_user_id")
  users          User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_3ddc983c5f7bcf132fd8732c3f4")
  platform_users PlatformUser? @relation(fields: [platformUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cbee9c76a74c6146e1301629edc")

  @@index([userId], map: "FK_3ddc983c5f7bcf132fd8732c3f4")
  @@index([platformUserId], map: "FK_cbee9c76a74c6146e1301629edc")
  @@map("refresh_tokens")
}

model UserConnection {
  id                                          Int                                           @id @default(autoincrement())
  createdAt                                   DateTime                                      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                                   DateTime                                      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  fromUserId                                  Int?                                          @map("from_user_id")
  toUserId                                    Int?                                          @map("to_user_id")
  oppositeUserConnectionId                    Int?                                          @unique(map: "REL_e5af0196967d64092604220d02") @map("opposite_user_connection_id")
  toUser                                      User?                                         @relation("user_connections_to_user_idTousers", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4b78485d215013ef730563ced8c")
  fromUser                                    User?                                         @relation("user_connections_from_user_idTousers", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cb08c09787fc9b7283feb3a7f51")
  mutualConnection                            UserConnection?                               @relation("user_connectionsTouser_connections", fields: [oppositeUserConnectionId], references: [id], onUpdate: NoAction, map: "FK_e5af0196967d64092604220d029")
  other_user_connections                      UserConnection?                               @relation("user_connectionsTouser_connections")
  platforms_user_connections_user_connections platforms_user_connections_user_connections[]
  user_connections_platforms_platforms        user_connections_platforms_platforms[]

  @@unique([fromUserId, toUserId], map: "IDX_89fbb46e0b112a12798cc1ee60")
  @@index([toUserId], map: "FK_4b78485d215013ef730563ced8c")
  @@map("user_connections")
}

model user_connections_platforms_platforms {
  platform_id        Int
  user_connection_id Int
  platforms          platforms      @relation(fields: [user_connection_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_44980a74eaf800d40e4ad89d066")
  user_connections   UserConnection @relation(fields: [platform_id], references: [id], onDelete: Cascade, map: "FK_a464a03734dd2d3f6d2b9d8e9d6")

  @@id([platform_id, user_connection_id])
  @@index([user_connection_id], map: "IDX_44980a74eaf800d40e4ad89d06")
  @@index([platform_id], map: "IDX_a464a03734dd2d3f6d2b9d8e9d")
}

model User {
  id                                                    Int              @id @default(autoincrement())
  username                                              String           @unique(map: "IDX_fe0bb3f6520ee0469504521e71") @db.VarChar(255)
  userHandle                                            String?          @unique(map: "IDX_7408d3a73b446527a875a312d4") @map("user_handle") @db.VarChar(255)
  email                                                 String           @unique(map: "IDX_97672ac88f789774dd47f7c8be") @db.VarChar(255)
  isActive                                              Boolean          @default(true) @map("is_active") @db.TinyInt
  hashedPassword                                        String           @map("hashed_password") @db.VarChar(255)
  createdAt                                             DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                                             DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  displayName                                           String?          @map("display_name") @db.VarChar(255)
  bio                                                   String?          @db.VarChar(255)
  platform_users                                        PlatformUser[]
  refresh_tokens                                        RefreshToken[]
  user_connections_user_connections_to_user_idTousers   UserConnection[] @relation("user_connections_to_user_idTousers")
  user_connections_user_connections_from_user_idTousers UserConnection[] @relation("user_connections_from_user_idTousers")

  @@map("users")
}
