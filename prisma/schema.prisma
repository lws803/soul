generator client {
  provider = "prisma-client-js"
}

// TODO: Sanitize this and make it respond to env variable
datasource db {
  provider = "mysql"
  url      = "mysql://root:@127.0.0.1:3306/soul_db_dev"
}

model Migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)

  @@map("migrations")
}

model PlatformCategories {
  id        Int         @id @default(autoincrement())
  name      String      @unique(map: "IDX_6b0e6556c6dddaad1ab2c6fbe5") @db.VarChar(255)
  platforms Platforms[]

  @@map("platform_categories")
}

model PlatformUsers {
  id             Int             @id @default(autoincrement())
  roles          Json?
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  userId         Int?            @map("user_id")
  platformId     Int?            @map("platform_id")
  platforms      Platforms?      @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1d2a9b39f3477e0aa97a996d711")
  users          Users?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_f48bdedbdc9ce9ed23392fdc4b4")
  refresh_tokens RefreshTokens[] // TODO: Revisit

  @@unique([userId, platformId], map: "IDX_9a2328071f3e0ff4b0836cffc8")
  @@index([platformId], map: "FK_1d2a9b39f3477e0aa97a996d711")
  @@map("platform_users")
}

model Platforms {
  id                                          Int                                         @id @default(autoincrement())
  name                                        String                                      @db.VarChar(255)
  nameHandle                                  String?                                     @unique(map: "IDX_9a4647eddfb970ff1db96fd2e5") @map("name_handle") @db.VarChar(255)
  createdAt                                   DateTime                                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                                   DateTime                                    @default(now()) @map("updated_at") @db.Timestamp(6)
  isVerified                                  Int                                         @default(0) @map("is_verified") @db.TinyInt
  redirectUris                                Json                                        @map("redirect_uris")
  platformCategoryId                          Int?                                        @map("platform_category_id")
  platform_categories                         PlatformCategories?                         @relation(fields: [platformCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_36ae51f292e99bb131443b47390")
  platform_users                              PlatformUsers[] // TODO: Convert the remaining
  platforms_user_connections_user_connections PlatformsUserConnectionsToUserConnections[]
  user_connections_platforms_platforms        UserConnectionsPlatformsToPlatforms[]

  @@index([platformCategoryId], map: "FK_36ae51f292e99bb131443b47390")
  @@index([name], map: "IDX_6add27e349b6905c85e016fa2c")
  @@map("platforms")
}

model PlatformsUserConnectionsToUserConnections {
  user_connection_id Int
  platformId         Int             @map("platform_id")
  user_connections   UserConnections @relation(fields: [platformId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_68497f3c1d20e50b6701fd27716")
  platforms          Platforms       @relation(fields: [user_connection_id], references: [id], onDelete: Cascade, map: "FK_ec16e6694ea1e9b32c032f2088e")

  @@id([user_connection_id, platformId])
  @@index([platformId], map: "IDX_68497f3c1d20e50b6701fd2771")
  @@index([user_connection_id], map: "IDX_ec16e6694ea1e9b32c032f2088")
  @@map("platforms_user_connections_user_connections")
}

model RefreshTokens {
  id               Int            @id @default(autoincrement())
  isRevoked        Int            @db.TinyInt
  expires          DateTime       @db.DateTime(0)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  user_id          Int?
  platform_user_id Int?
  platform_users   PlatformUsers? @relation(fields: [platform_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cbee9c76a74c6146e1301629edc")
  users            Users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_3ddc983c5f7bcf132fd8732c3f4")

  @@index([user_id], map: "FK_3ddc983c5f7bcf132fd8732c3f4")
  @@index([platform_user_id], map: "FK_cbee9c76a74c6146e1301629edc")
  @@map("refresh_tokens")
}

model UserConnections {
  id                                          Int                                         @id @default(autoincrement())
  created_at                                  DateTime                                    @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime                                    @default(now()) @db.Timestamp(6)
  from_user_id                                Int?
  to_user_id                                  Int?
  opposite_user_connection_id                 Int?                                        @unique(map: "REL_e5af0196967d64092604220d02")
  users_user_connections_from_user_idTousers  Users?                                      @relation("user_connections_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cb08c09787fc9b7283feb3a7f51")
  user_connections                            UserConnections?                            @relation("user_connectionsTouser_connections_opposite_user_connection_id", fields: [opposite_user_connection_id], references: [id], onUpdate: NoAction, map: "FK_e5af0196967d64092604220d029")
  users_user_connections_to_user_idTousers    Users?                                      @relation("user_connections_to_user_idTousers", fields: [to_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4b78485d215013ef730563ced8c")
  platforms_user_connections_user_connections PlatformsUserConnectionsToUserConnections[]
  other_user_connections                      UserConnections?                            @relation("user_connectionsTouser_connections_opposite_user_connection_id")
  user_connections_platforms_platforms        UserConnectionsPlatformsToPlatforms[]

  @@unique([from_user_id, to_user_id], map: "IDX_89fbb46e0b112a12798cc1ee60")
  @@index([to_user_id], map: "FK_4b78485d215013ef730563ced8c")
  @@map("user_connections")
}

model UserConnectionsPlatformsToPlatforms {
  platform_id        Int
  user_connection_id Int
  user_connections   UserConnections @relation(fields: [platform_id], references: [id], onDelete: Cascade, map: "FK_a464a03734dd2d3f6d2b9d8e9d6")
  platforms          Platforms       @relation(fields: [user_connection_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_44980a74eaf800d40e4ad89d066")

  @@id([platform_id, user_connection_id])
  @@index([user_connection_id], map: "IDX_44980a74eaf800d40e4ad89d06")
  @@index([platform_id], map: "IDX_a464a03734dd2d3f6d2b9d8e9d")
  @@map("user_connections_platforms_platforms")
}

model Users {
  id                                                    Int               @id @default(autoincrement())
  username                                              String            @db.VarChar(255)
  user_handle                                           String?           @unique(map: "IDX_7408d3a73b446527a875a312d4") @db.VarChar(255)
  email                                                 String            @unique(map: "IDX_97672ac88f789774dd47f7c8be") @db.VarChar(255)
  is_active                                             Int               @default(1) @db.TinyInt
  hashed_password                                       String            @db.VarChar(255)
  created_at                                            DateTime          @default(now()) @db.Timestamp(6)
  updated_at                                            DateTime          @default(now()) @db.Timestamp(6)
  platform_users                                        PlatformUsers[]
  refresh_tokens                                        RefreshTokens[]
  user_connections_user_connections_from_user_idTousers UserConnections[] @relation("user_connections_from_user_idTousers")
  user_connections_user_connections_to_user_idTousers   UserConnections[] @relation("user_connections_to_user_idTousers")

  @@index([username], map: "IDX_fe0bb3f6520ee0469504521e71")
  @@map("users")
}
