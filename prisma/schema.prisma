generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PlatformCategory {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "IDX_6b0e6556c6dddaad1ab2c6fbe5") @db.VarChar(255)
  platforms Platform[]

  @@map("platform_categories")
}

model PlatformUser {
  id             Int            @id @default(autoincrement())
  roles          Json?
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userId         Int?           @map("user_id")
  platformId     Int?           @map("platform_id")
  profileUrl     String?        @map("profile_url") @db.VarChar(255)
  platform       Platform?      @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1d2a9b39f3477e0aa97a996d711")
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_f48bdedbdc9ce9ed23392fdc4b4")
  refresh_tokens RefreshToken[]

  @@unique([userId, platformId], map: "IDX_9a2328071f3e0ff4b0836cffc8")
  @@index([platformId], map: "FK_1d2a9b39f3477e0aa97a996d711")
  @@map("platform_users")
}

model Platform {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(255)
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  isVerified         Boolean           @default(false) @map("is_verified") @db.TinyInt
  redirectUris       Json              @map("redirect_uris")
  platformCategoryId Int?              @map("platform_category_id")
  activityWebhookUri String?           @map("activity_webhook_uri") @db.VarChar(255)
  clientSecret       String?           @map("client_secret") @db.VarChar(255)
  homepageUrl        String?           @map("homepage_url") @db.VarChar(255)
  category           PlatformCategory? @relation(fields: [platformCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_36ae51f292e99bb131443b47390")
  platform_users     PlatformUser[]

  @@index([platformCategoryId], map: "FK_36ae51f292e99bb131443b47390")
  @@index([name], map: "IDX_6add27e349b6905c85e016fa2c")
  @@map("platforms")
}

model RefreshToken {
  id             Int           @id @default(autoincrement())
  isRevoked      Boolean       @map("is_revoked") @db.TinyInt
  expires        DateTime      @db.DateTime(0)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userId         Int?          @map("user_id")
  platformUserId Int?          @map("platform_user_id")
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_3ddc983c5f7bcf132fd8732c3f4")
  platformUser   PlatformUser? @relation(fields: [platformUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cbee9c76a74c6146e1301629edc")

  @@index([userId], map: "FK_3ddc983c5f7bcf132fd8732c3f4")
  @@index([platformUserId], map: "FK_cbee9c76a74c6146e1301629edc")
  @@map("refresh_tokens")
}

model UserConnection {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  fromUserId               Int?            @map("from_user_id")
  toUserId                 Int?            @map("to_user_id")
  oppositeUserConnectionId Int?            @unique(map: "REL_e5af0196967d64092604220d02") @map("opposite_user_connection_id")
  toUser                   User?           @relation("user_connections_to_user_idTousers", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4b78485d215013ef730563ced8c")
  fromUser                 User?           @relation("user_connections_from_user_idTousers", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cb08c09787fc9b7283feb3a7f51")
  mutualConnection         UserConnection? @relation("user_connectionsTouser_connections", fields: [oppositeUserConnectionId], references: [id], onUpdate: NoAction, map: "FK_e5af0196967d64092604220d029")
  other_user_connections   UserConnection? @relation("user_connectionsTouser_connections")

  @@unique([fromUserId, toUserId], map: "IDX_89fbb46e0b112a12798cc1ee60")
  @@index([toUserId], map: "FK_4b78485d215013ef730563ced8c")
  @@map("user_connections")
}

model User {
  id                                                    Int              @id @default(autoincrement())
  username                                              String           @unique(map: "IDX_fe0bb3f6520ee0469504521e71") @db.VarChar(255)
  email                                                 String           @unique(map: "IDX_97672ac88f789774dd47f7c8be") @db.VarChar(255)
  isActive                                              Boolean          @default(false) @map("is_active") @db.TinyInt
  hashedPassword                                        String           @map("hashed_password") @db.VarChar(255)
  createdAt                                             DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                                             DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  displayName                                           String?          @map("display_name") @db.VarChar(255)
  bio                                                   String?          @db.VarChar(255)
  platform_users                                        PlatformUser[]
  refresh_tokens                                        RefreshToken[]
  user_connections_user_connections_to_user_idTousers   UserConnection[] @relation("user_connections_to_user_idTousers")
  user_connections_user_connections_from_user_idTousers UserConnection[] @relation("user_connections_from_user_idTousers")

  @@map("users")
}
